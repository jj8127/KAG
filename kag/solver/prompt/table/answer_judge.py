from string import Template
from typing import List

from kag.common.base.prompt_op import PromptOp


class AnswerJudge(PromptOp):

    template_zh = """你是一个对回答质量进行判断的专家，你的任务是对标准答案和输出答案进行对比和分类。分类的标准如下：
类别1:输出答案和标准答案给出了相同的结果。
类别2:输出答案和标准答案给出了不同的结果，标准答案的回答正确，输出答案的计算逻辑和计算结果也正确。
类别3:输出答案和标准答案给出了不同的结果，但是标准答案的回答不正确，或者相关上下文无法解释标准答案的回答。输出答案的回答正确。
类别4:输出答案和标准答案给出了不同的结果，标准答案的回答正确，输出答案的回答不正确。
你的输出应该是纯json格式，不包含任何无关语句。输出格式为：
{
  "答案类别":"类别1/2/3/4",
  "理由","输出你认为的理由"
}
########
样例1:易方达北证50指数C50份多少钱

标准答案：易方达北证50指数C50份的金额为64.46元。
输出答案：根据提供的信息，易方达北证50指数C的基金单位净值是1.2892元人民币。要计算50份的金额，可以使用以下公式：

基金金额 = 基金份额 × 单位净值

将50份代入公式：

基金金额 = 50 × 1.2892 = 64.46元

因此，易方达北证50指数C的50份的金额是64.46元。
你的判断：
{
  "答案类别":"类别1",
  "理由","输出答案和标准答案计算的结果相同"
}
#######
#######
样例2:
原始问题：200万存余额宝每天可以拿到多少钱
标准答案：200万存入余额宝每天的收益大约为78.36元，但这只是一个估算值，实际每日收益可能会因市场波动和具体每日万份收益而有所不同。
输出答案：根据当前时间2024年12月02日，以及提供的供给内容，我们可以得知2024年11月28日的7日年化收益率为1.49%。假设这个收益率是相对稳定的，我们可以使用这个收益率来计算200万存余额宝每天的收益。



余额宝的收益计算公式为：每日收益 = 持有金额 × 日预期年化收益率 / 365



将200万代入公式：



每日收益 = 2000000 × 1.49% / 365 ≈ 81.64元



因此，200万存余额宝每天可以拿到大约81.64元的收益。需要注意的是，这个计算是基于假设收益率稳定的情况，实际收益可能会有波动。
你的判断：
{
  "答案类别":"类别2",
  "理由","标准答案和输出答案虽然计算的结果不同，但主要由于年化收益率不同导致的，输出答案的计算逻辑没有问题，计算结果也正确"
}
######
######
样例3:
原始问题：投资2000元于日收益0.05%的理财产品，200天后的收益是多少？
标准答案：投资2000元于日收益0.05%的理财产品，200天后的收益约为210.29元。这意味着，200天后你的总金额将是2210.29元。
输出答案：总收益为: 200.00元
你的判断：
{
  "答案类别":"类别3",
  "理由","标准答案和输出答案计算的结果不同，标准答案计算错误，输出答案计算正确"
}
######
######
样例4:
原始问题：定期的利息是怎么计算的，如果我存12w，年利率是百二，一年后我能有多少收益
标准答案：一年后你能有2400元的收益。
输出答案：根据提供的信息，我们可以确定定期存款的年利率是12%。接下来，我们计算12万元存入定期存款一年的利息。

利息计算公式为：利息 = 本金 × 年利率

将本金12万元（120,000元）和年利率12%（0.12）代入公式，得到：

利息 = 120,000元 × 0.12 = 14,400元

一年后的总金额为：本金 + 利息 = 120,000元 + 14,400元 = 134,400元

综上所述，如果您存入12万元，年利率为12%，一年后您将获得14,400元的利息，一年后的总金额为134,400元。
你的判断：
{
  "答案类别":"类别4",
  "理由","输出答案计算错误，把年利率百二当成了12%，实际应该是2%"
}
######
相关上下文：$context
原始问题：$question
标准答案：$label_answer
输出答案：$out_answer
你的判断：
"""

    template_en = template_zh

    def __init__(self, language: str):
        super().__init__(language)

    @property
    def template_variables(self) -> List[str]:
        return ["question", "label_answer", "out_answer"]

    def parse_response(self, response: str, **kwargs):
        return response
